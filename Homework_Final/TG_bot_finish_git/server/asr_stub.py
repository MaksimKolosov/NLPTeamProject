import os
import torch
import librosa
import soundfile as sf
import whisper
from scipy.signal import butter, filtfilt
from pydub import AudioSegment
from whisper import load_model

def audio(file_path: str) -> str:
    """
    –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç.
    :param file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (ogg, mp3, wav, m4a –∏ —Ç.–¥.)
    :return: —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (str)
    """
    try:
        if not os.path.exists(file_path):
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
        y, sr = librosa.load(file_path, sr=16000, mono=True)
        print(f"üéµ –î–ª–∏–Ω–∞: {len(y)/sr:.2f} —Å, —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {sr} –ì—Ü")

        # –§–∏–ª—å—Ç—Ä –¥–ª—è —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è
        def butter_bandpass(lowcut, highcut, fs, order=5):
            nyq = 0.5 * fs
            b, a = butter(order, [lowcut / nyq, highcut / nyq], btype="band")
            return b, a

        b, a = butter_bandpass(80, 7000, sr, order=5)
        y_bp = filtfilt(b, a, y)
        print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: –ø–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä 80‚Äì7000 –ì—Ü")


        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (Whisper)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ 
        model_size = "medium"  # tiny/base/small/medium/large
        device = "cuda" if torch.cuda.is_available() else "cpu"
        model = whisper.load_model(model_size, device=device)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV-—Ñ–∞–π–ª
        sf.write("tmp_input.wav", y_bp, sr)

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        result = model.transcribe(
            "tmp_input.wav",
            task="transcribe",
            language="en",
            fp16=torch.cuda.is_available()
        )

        text = result["text"].strip()
        print("\nüé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n", text)

        return text

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ASR: {e}")
        return ""